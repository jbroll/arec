#!/usr/bin/env tclsh8.6
#
lappend auto_path ../lib lib /Users/john/lib

package require tcltest
package require arec
package require struct

source perm.tcl
source ../template.tcl
source ../functional.tcl

set Types [arec::types get name]
set Sizes [arec::types get size]

array set TMap {
    char	char
    uchar	"unsigned char"
    short	short
    ushort	"unsigned short"
    int		int
    uint	"unsigned int"
    long	long
    ulong	"unsigned long"
    float	float
    double	double
    string	char*
    Tcl_Obj*	Tcl_Obj*
    Tcl_Obj	Tcl_Obj*
}

foreach type $Types size $Sizes {
    puts "$size : [sizeof_$type]"
}

foreach type $Types {
    set Type [regsub {[^_a-zA-Z]} $type {}]

    arec::typedef ${type}_struct [subst { $type value }]
}

puts [info commands sizeof_*]

foreach type $Types {
    set Type [regsub {[^_a-zA-Z]} $type {}]

    puts "[${type}_struct size] [sizeof_${Type}_struct]"
}


proc structN { n } {
    foreach types [combi $::Types $n list] {
	puts $types
	arec::typedef struct _struct_[join $types _] {
	    upvar types types

	    foreach { i type } [enumerate $types] {
		$type value$i
	    }
	} [join $types _]_struct
    }
}

structN 2
#structN 3

proc testN { n } {
    foreach types [combi $::Types $n list] {
	puts "[[join $types _]_struct size] : [sizeof_[join $types _]]"
    }
}

testN 2
#testN 3

exit

source ../register.unsourced

puts "Register size	[tna::Register size]"
puts "Axis		[tna::Axis size]"
puts "Data		[tna::TNAData size]"
puts "Value		[tna::TNAValue size]"


exit

#puts [arec::types get]


exit


    } int [subst { 
	typedef struct _struct_[join [map t $types { I $::IMap($t) }] _] { [subst {
	     [: { i type } [enumerate $types] { $::TMap($type) value$i; }]
	}] }            struct_[join [map t $types { I $::IMap($t)}] _];
	
	return sizeof(  struct_[join [map t $types { I $::IMap($t)}] _]); 
    }]
